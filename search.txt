import pandas as pd
import os
import difflib

CITY_LIST = [
    "warszawa",
    "krak√≥w",
    "≈Ç√≥d≈∫",
    "wroc≈Çaw",
    "pozna≈Ñ",
    "gda≈Ñsk",
    "szczecin",
    "bydgoszcz",
    "lublin",
    "katowice",
    "bialystok",
    "gdynia",
    "czestochowa",
    "radom",
    "sosnowiec",
    "toru≈Ñ",
    "kielce",
    "gliwice",
    "zabrze",
    "bytom",
    "olsztyn",
    "rzesz√≥w",
    "bielsko-bia≈Ça",
    "rybnik",
    "tarn√≥w",
    "opole",
    "gorz√≥w wielkopolski",
    "zielona g√≥ra",
    "p≈Çock",
    "elblƒÖg",
    "wa≈Çbrzych",
    "w≈Çoc≈Çawek",
    "chorz√≥w",
    "koszalin",
    "kalisz",
    "legnica",
    "grudziƒÖdz",
    "s≈Çupsk",
    "jaworzno",
    "jastrzƒôbie-zdr√≥j",
    "nowy sƒÖcz",
    "jelenia g√≥ra",
    "konin",
    "mys≈Çowice",
    "inowroc≈Çaw",
    "piotrk√≥w trybunalski",
    "pi≈Ça",
    "pabianice",
    "ostrowiec ≈õwiƒôtokrzyski",
    "g≈Çog√≥w",
    "suwa≈Çki",
    "lubin",
    "≈ºory",
    "zamo≈õƒá",
    "ostr√≥w wielkopolski",
    "tczew",
    "mielec",
    "kƒôdzierzyn-ko≈∫le",
    "przemy≈õl",
    "stalowa wola",
    "tomasz√≥w mazowiecki",
    "che≈Çm",
    "be≈Çchat√≥w",
    "≈õwidnica",
    "bƒôdzin",
    "zgierz",
    "≈Çom≈ºa",
    "legionowo",
    "pruszk√≥w",
    "siedlce",
    "sieradz",
    "gorz√≥w",
    "racib√≥rz",
    "ostro≈Çƒôka",
    "≈õwiƒôtoch≈Çowice",
    "wejherowo",
    "zawiercie",
    "skierniewice",
    "starachowice",
    "wodzis≈Çaw ≈õlƒÖski",
    "starogard gda≈Ñski",
    "pu≈Çawy",
    "tarnobrzeg",
    "ko≈Çobrzeg",
    "krosno",
    "radomsko",
    "otwock",
    "skar≈ºysko-kamienna",
    "ciechan√≥w",
    "kutno",
    "zdu≈Ñska wola",
    "≈õwinouj≈õcie",
    "≈ºyrard√≥w",
    "boles≈Çawiec",
    "nowa s√≥l",
    "knur√≥w",
    "o≈õwiƒôcim",
    "sopot",
]


def load_cleaned_data():
    """≈Åaduje oczyszczone dane –∑ pliku CSV."""
    path = "data/offers_cleaned.csv"
    if not os.path.isfile(path):
        raise FileNotFoundError(f"Plik {path} nie zosta≈Ç znaleziony.")
    return pd.read_csv(path)


def search_offers(filters, df=None):
    """–§—ñ–ª—å—Ç—Ä—É—î DataFrame –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏."""
    if df is None:
        df = load_cleaned_data()
    for col, (min_val, max_val) in filters.items():
        if col not in df.columns:
            continue
        if min_val is not None:
            df = df[df[col] >= min_val]
        if max_val is not None:
            df = df[df[col] <= max_val]
    return df


def open_links_interactively(df):
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–∑–∞–ø–∏—Ç—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)."""
    import webbrowser

    for idx, row in df.iterrows():
        print(
            f"\n[{idx+1}] {row.get('main_price_cleaned', '')} z≈Ç, {row.get('area_cleaned', '')} m¬≤, {row.get('rooms_cleaned', '')} pokoi"
        )
        print(f"URL: {row.get('url', '')}")
        choice = (
            input("Otworzyƒá link? [ENTER=tak, n=nie, 0=przerwij]: ").strip().lower()
        )
        if choice == "0":
            break
        if choice != "n":
            webbrowser.open(row.get("url", ""))


def clear_console():
    os.system("cls" if os.name == "nt" else "clear")


def run_search_cli():
    while True:
        print("üîé Rozszerzony filtr mieszka≈Ñ")
        df_all = load_cleaned_data()
        filters = {}

        # --- Miasto ---
        while True:
            city_input = (
                input("Miasto (np. warszawa / ENTER = dowolne): ").strip().lower()
            )
            if not city_input:
                break
            if city_input in CITY_LIST:
                df_all = df_all[df_all["city"].astype(str).str.lower() == city_input]
                if df_all.empty:
                    print("‚ùå Brak og≈Çosze≈Ñ w podanym mie≈õcie.")
                    continue
                break
            suggestions = difflib.get_close_matches(
                city_input, CITY_LIST, n=5, cutoff=0.6
            )
            if suggestions:
                print(f"‚ùå Nie znaleziono miasta '{city_input}'. Mo≈ºe chodzi≈Ço o:")
                [print(f"  [{i}] {s}") for i, s in enumerate(suggestions, 1)]
                wybor = input("Wybierz numer miasta lub ENTER: ").strip()
                if wybor.isdigit() and 1 <= int(wybor) <= len(suggestions):
                    city_input = suggestions[int(wybor) - 1]
                    df_all = df_all[
                        df_all["city"].astype(str).str.lower() == city_input
                    ]
                    if df_all.empty:
                        print("‚ùå Brak og≈Çosze≈Ñ.")
                        continue
                    break
            else:
                print("‚ùå Nie znaleziono takiego miasta. Spr√≥buj ponownie.")

        # --- Winda ---
        if (
            input("Czy wymagana winda? [t/N]: ").strip().lower() == "t"
            and "winda_cleaned" in df_all.columns
        ):
            df_all = df_all[df_all["winda_cleaned"] == 1]

        # --- Filtry liczbowe z ograniczeniami logicznymi ---
        field_limits = {
            "rooms_cleaned": 10,
            "area_cleaned": 300,
            "main_price_cleaned": 30000,
        }

        break_flag = False

        for col, prompt, typ, minmax in [
            ("rooms_cleaned", "Minimalna liczba pokoi (ENTER = dowolna): ", int, 0),
            ("rooms_cleaned", "Maksymalna liczba pokoi (ENTER = dowolna): ", int, 1),
            ("area_cleaned", "Minimalna powierzchnia (ENTER = dowolna): ", float, 0),
            ("area_cleaned", "Maksymalna powierzchnia (ENTER = dowolna): ", float, 1),
            ("main_price_cleaned", "Minimalna cena (ENTER = dowolna): ", float, 0),
            ("main_price_cleaned", "Maksymalna cena (ENTER = dowolna): ", float, 1),
        ]:
            try:
                val = input(prompt).strip()
                if val:
                    num = typ(val)
                    limit = field_limits.get(col, None)
                    if limit is not None and num > limit:
                        print(
                            f"‚ùå Warto≈õƒá {num} dla '{col}' przekracza logiczne ograniczenie ({limit})."
                        )
                        print("üîÅ Powr√≥t do poczƒÖtku filtrowania.\n")
                        break_flag = True
                        break
                    filters.setdefault(col, [None, None])[minmax] = num
            except ValueError:
                print("‚ùå Niepoprawna liczba.")
                print("üîÅ Powr√≥t do poczƒÖtku filtrowania.\n")
                break_flag = True
                break

        if break_flag:
            continue

        # --- Szukanie ---
        result = search_offers({k: tuple(v) for k, v in filters.items()}, df_all)
        if result.empty:
            print("‚ùå Brak ofert spe≈ÇniajƒÖcych kryteria.")
            continue

        print(f"\n‚úÖ Znalezione oferty: {len(result)}\n")
        result_display = result.reset_index(drop=True)
        result_display.index += 1

        print("\nüìã Wszystkie znalezione og≈Çoszenia:\n")
        print(
            result_display[
                ["city", "main_price_cleaned", "area_cleaned", "rooms_cleaned"]
            ]
        )

        # --- Wykrywanie anomalii ---
        prices = result_display["main_price_cleaned"].dropna()
        result_display["anomaly"] = ""
        if len(prices) >= 5:
            q1, q3 = prices.quantile(0.25), prices.quantile(0.75)
            iqr, low, high = q3 - q1, q1 - 1.5 * (q3 - q1), q3 + 1.5 * (q3 - q1)

            def anomaly_flag(price):
                return (
                    "‚¨áÔ∏è podejrzanie niska"
                    if price < low
                    else ("‚¨ÜÔ∏è podejrzanie wysoka" if price > high else "")
                )

            result_display["anomaly"] = result_display["main_price_cleaned"].apply(
                anomaly_flag
            )
            anomalies = result_display[result_display["anomaly"] != ""]
            if not anomalies.empty:
                print(f"\n‚ö†Ô∏è Znaleziono {len(anomalies)} og≈Çosze≈Ñ z anomaliƒÖ cenowƒÖ:\n")
                for i, (_, row) in enumerate(anomalies.iterrows(), 1):
                    print(f"‚û°Ô∏è [{i}] {row['anomaly']}")
                    print(
                        row[
                            [
                                "city",
                                "main_price_cleaned",
                                "area_cleaned",
                                "rooms_cleaned",
                            ]
                        ].to_string()
                    )
                    print("-" * 60)
        else:
            print("\n‚ÑπÔ∏è Zbyt ma≈Ço danych do wyznaczenia anomalii (potrzeba ‚â• 5 cen).")

        # --- Tryb inteligentny: znajd≈∫ najlepsze okazje ---
        result_display["price_per_m2"] = (
            result_display["main_price_cleaned"] / result_display["area_cleaned"]
        )
        top_deals = result_display.sort_values("price_per_m2").head(5)
        print("\nüèÜ Najlepsze okazje (cena za m¬≤):")
        print(
            top_deals[
                ["city", "main_price_cleaned", "area_cleaned", "price_per_m2", "url"]
            ]
        )

        # --- Otwieranie link√≥w ---
        while True:
            wybor = input(
                "\nWprowad≈∫ numer og≈Çoszenia do otwarcia (0 = wyj≈õcie): "
            ).strip()
            if not wybor or wybor == "0":
                break
            if wybor.isdigit() and 1 <= int(wybor) <= len(result_display):
                url = result_display.iloc[int(wybor) - 1]["url"]
                print("Otwieram:", url)
                import webbrowser

                webbrowser.open(url)
            else:
                print("‚ùå Nieprawid≈Çowy numer.")

        if input("\n[0] Menu g≈Ç√≥wne   [ENTER] Nowe wyszukiwanie: ").strip() == "0":
            break
        clear_console()


if __name__ == "__main__":
    run_search_cli()
